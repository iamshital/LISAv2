# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License.

function Main {
    # Create test result 
    $superUser = "root"
    $resultArr = @()

    try {
        #region CONFIGURE VM FOR DPDK TEST
        LogMsg "VM details :"
        LogMsg "  RoleName : $($allVMData.RoleName)"
        LogMsg "  Public IP : $($allVMData.PublicIP)"
        LogMsg "  SSH Port : $($allVMData.SSHPort)"
        LogMsg "  Internal IP : $($allVMData.InternalIP)"

        # PROVISION VMS FOR LISA WILL ENABLE ROOT USER AND 
        #   WILL MAKE ENABLE PASSWORDLESS AUTHENTICATION ACROSS ALL VMS IN SAME HOSTED SERVICE.
        ProvisionVMsForLisa -allVMData $allVMData -installPackagesOnRoleNames "none"
        #endregion

        LogMsg "Getting Active NIC Name."
        $getNicCmd = ". ./utils.sh &> /dev/null && get_active_nic_name"
        $vmNicName = (RunLinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort -username $superUser -password $password -command $getNicCmd).Trim()
        
        if($EnableAcceleratedNetworking -or ($currentTestData.AdditionalHWConfig.Networking -imatch "SRIOV")) {
            $DataPath = "SRIOV"
        } else {
            $DataPath = "Synthetic"
        }
        LogMsg "VM $DataPath NIC: $vmNicName"

        LogMsg "Generating constants.sh ..."
        $constantsFile = "$LogDir\constants.sh"
        Set-Content -Value "#Generated by Azure Automation." -Path $constantsFile
        Add-Content -Value "vms=$($allVMData.RoleName)" -Path $constantsFile
        Add-Content -Value "client=$($allVMData.InternalIP)" -Path $constantsFile
        Add-Content -Value "server=$($allVMData.InternalIP)" -Path $constantsFile
        foreach ($param in $currentTestData.TestParameters.param) {
            Add-Content -Value "$param" -Path $constantsFile
        }
        LogMsg "constanst.sh created successfully..."
        LogMsg (Get-Content -Path $constantsFile)
        #endregion

        #region EXECUTE TEST
        $myString = @"
cd /root/
./dpdkSetup.sh 2>&1 > dpdkConsoleLogs.txt
. utils.sh
collect_VM_properties
"@
        Set-Content "$LogDir\StartDpdkSetup.sh" $myString
        RemoteCopy -uploadTo $allVMData.PublicIP -port $allVMData.SSHPort -files ".\$constantsFile,.\$LogDir\StartDpdkSetup.sh" -username $superUser -password $password -upload

        $null = RunLinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort -username $superUser -password $password -command "chmod +x *.sh" | Out-Null
        $testJob = RunLinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort -username $superUser -password $password -command "./StartDpdkSetup.sh" -RunInBackground
        #endregion

        #region MONITOR TEST
        while ((Get-Job -Id $testJob).State -eq "Running") {
            $currentStatus = RunLinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort -username $superUser -password $password -command "tail -2 dpdkConsoleLogs.txt | head -1"
            LogMsg "Current Test Staus : $currentStatus"
            WaitFor -seconds 20
        }
        $finalStatus = RunLinuxCmd -ip $allVMData.PublicIP -port $allVMData.SSHPort -username $superUser -password $password -command "cat /root/state.txt"
        RemoteCopy -downloadFrom $allVMData.PublicIP -port $allVMData.SSHPort -username $superUser -password $password -download -downloadTo $LogDir -files "*.csv, *.txt, *.log"
        
        if ($finalStatus -imatch "TestFailed") {
            LogErr "Test failed. Last known status : $currentStatus."
            $testResult = "FAIL"
        }
        elseif ($finalStatus -imatch "TestAborted") {
            LogErr "Test Aborted. Last known status : $currentStatus."
            $testResult = "ABORTED"
        }
        elseif ($finalStatus -imatch "TestCompleted") {
            LogMsg "Test Completed."
            LogMsg "DPDK build is Success"            
            $testResult = "PASS"
        }
        else {
            LogErr "Test execution is not successful, Check test logs in VM."
            $testResult = "ABORTED"
        }
        LogMsg "Test result : $testResult"        
    } catch {
        $ErrorMessage =  $_.Exception.Message
        $ErrorLine = $_.InvocationInfo.ScriptLineNumber
        LogErr "EXCEPTION : $ErrorMessage at line: $ErrorLine"
        $testResult = "FAIL"
    } finally {
        if (!$testResult) {
            $testResult = "Aborted"
        }
        $resultArr += $testResult
    }
    $currentTestResult.TestResult = GetFinalResultHeader -resultarr $resultArr
    return $currentTestResult.TestResult  
}

Main
